// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  email            String            @unique
  AdminName        String?
  role             Role              @default(USER)
  status           Status            @default(PENDING)
  coverImage       String?
  password         String
  fcmToken         String?
  profileRole      ProfileRole?
  customerId       String?
  connectAccountId String?
  subscriptionPlan SubscriptionPlan?
  isVerified       Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  athleteInfoId String?      @db.ObjectId
  AthleteInfo   AthleteInfo? @relation(fields: [athleteInfoId], references: [id])

  clubInfoId String?   @db.ObjectId
  ClubInfo   ClubInfo? @relation(fields: [clubInfoId], references: [id])

  brandInfoId String?    @db.ObjectId
  BrandInfo   BrandInfo? @relation(fields: [brandInfoId], references: [id])

  Post  Post[]
  likes Like[]

  receiver         Notifications[]   @relation("receiverDetails")
  sender           Notifications[]   @relation("senderDetails")
  SubscriptionUser SubscriptionUser?

  // chat relations
  chatsSent            Chat[]         @relation("SenderRelation")
  chatsReceived        Chat[]         @relation("ReceiverRelation")
  roomsSent            Room[]         @relation("SenderRelation")
  roomsReceived        Room[]         @relation("ReceiverRelation")
  donor                Donor[]
  Recipient            Recipient[]
  transactionSender    transactions[] @relation("TransactionSender")
  transactionRecipient transactions[] @relation("TransactionRecipient")
}

model AthleteInfo {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @unique @db.ObjectId
  fullName         String?
  profileImage     String?
  sportName        String?
  bio              String?
  clubName         String?
  position         String?
  country          String?
  city             String?
  passportOrNidImg String?
  selfieImage      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  User             User[]
  post             Post[]
  sponsorsIds      String[] @default([])
}

model ClubInfo {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @unique @db.ObjectId
  clubName         String?
  bio              String?
  country          String?
  city             String?
  sportName        String?
  logoImage        String?
  members          Int?
  foundedYear      DateTime?
  licenseImage     String?
  certificateImage String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  User             User[]
  post             Post[]
  sponsorsIds      String[]  @default([])
}

model BrandInfo {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  brandName String?
  country   String?
  city      String?
  logoImage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
  post      Post[]
}

model transactions {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  senderId      String      @db.ObjectId
  recipientId String      @db.ObjectId
  earningType EarningType
  amount      Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User        @relation("TransactionSender", fields: [senderId], references: [id])
  Recipient   User        @relation("TransactionRecipient", fields: [recipientId], references: [id])
}

enum EarningType {
  SPONSOR
  SUPPORT
  QUICKSUPPORT
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  content     String?
  image       String?
  video       String?
  userDetails User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       Like[]
  shareLink   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  athleteInfoId String?      @db.ObjectId
  AthleteInfo   AthleteInfo? @relation(fields: [athleteInfoId], references: [id])

  clubInfoId String?   @db.ObjectId
  ClubInfo   ClubInfo? @relation(fields: [clubInfoId], references: [id])

  brandInfoId String?    @db.ObjectId
  BrandInfo   BrandInfo? @relation(fields: [brandInfoId], references: [id])

  isSponsored Boolean @default(false)
  donor       Donor[]
}

model Sports {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])

  postId String @db.ObjectId
  Post   Post   @relation(fields: [postId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tier {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  type        TierType
  amount      Float
  description String
  showProfile Boolean     @default(false)
  showContent Boolean     @default(false)
  showBanner  Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  donor       Donor[]
  Recipient   Recipient[]

  @@map("tiers")
}

model Donor {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  recipientUserId String    @db.ObjectId
  tierId          String?   @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  postId          String?   @db.ObjectId
  recipientId     String    @db.ObjectId
  amount          Float?
  recipient       Recipient @relation(fields: [recipientId], references: [id])
  tierDetails     Tier?     @relation(fields: [tierId], references: [id])
  userDetails     User      @relation(fields: [userId], references: [id])
  posts           Post?     @relation(fields: [postId], references: [id])

  @@map("donors")
}

model Recipient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  tierId    String?  @db.ObjectId
  postId    String   @db.ObjectId
  amount    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userDetails User  @relation(fields: [userId], references: [id])
  tierDetails Tier? @relation(fields: [tierId], references: [id])

  Donor Donor[]

  @@map("recipients")
}

enum TierType {
  INDIVIDUAL
  BRAND
}

enum ProfileRole {
  CLUB
  BRAND
  ATHLETE
}

model Chat {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  message    String
  roomId     String   @db.ObjectId
  images     String[]
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  room       Room     @relation(fields: [roomId], references: [id])

  @@map("chats")
}

model Room {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SenderRelation", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])
  chat       Chat[]

  @@map("rooms")
}

model Otp {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  otp       Int
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("otps")
}

model Payment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  amount        Float
  paymentId     String?
  paymentMethod String?
  serviceId     String   @unique @db.ObjectId
  // bookDetails Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Subscription {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  stripeProductId  String
  stripePriceId    String
  price            Float
  description      String
  currency         String
  interval         String?
  status           Status            @default(ACTIVE)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  SubscriptionUser SubscriptionUser?
}

model SubscriptionUser {
  id                 String       @id @default(auto()) @map("_id") @db.ObjectId
  userId             String       @unique @db.ObjectId
  subscriptionPlanId String       @unique @db.ObjectId // E.g., "basic", "premium", etc.
  subscriptionId     String // Stripe subscription ID
  subscriptionStatus String // E.g., "active", "canceled", "incomplete"
  subscriptionStart  DateTime // When the subscription started
  subscriptionEnd    DateTime // When it ends (for trial or cancel)
  userDetails        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionPlan   Subscription @relation(fields: [subscriptionPlanId], references: [id], onDelete: Cascade)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String   @db.ObjectId
  senderId   String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("receiverDetails", fields: [receiverId], references: [id])
  sender     User?    @relation("senderDetails", fields: [senderId], references: [id])
}

enum Role {
  USER
  WORKER
  ADMIN
}

enum Status {
  PENDING
  ACTIVE
  BLOCKED
}

enum SubscriptionPlan {
  BASIC
  PRO
  EXPIRED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
}
